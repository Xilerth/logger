{"hash":"926dbe9e5abc10d95e3388e85dd54befba51df88","fesm2022":[{"exports":["LoggerService"],"facadeModuleId":"D:\\git\\logger\\dist\\logger\\esm2022\\xilerth-ngx-logger.mjs","isDynamicEntry":false,"isEntry":true,"isImplicitEntry":false,"moduleIds":["D:\\git\\logger\\dist\\logger\\esm2022\\lib\\services\\logger.service.mjs","D:\\git\\logger\\dist\\logger\\esm2022\\lib\\models\\logger.interface.mjs","D:\\git\\logger\\dist\\logger\\esm2022\\public-api.mjs","D:\\git\\logger\\dist\\logger\\esm2022\\xilerth-ngx-logger.mjs"],"name":"xilerth-ngx-logger","type":"chunk","dynamicImports":[],"fileName":"xilerth-ngx-logger.mjs","implicitlyLoadedBefore":[],"importedBindings":{"@angular/core":["*","Injectable"],"rxjs":["BehaviorSubject"]},"imports":["@angular/core","rxjs"],"modules":{"D:\\git\\logger\\dist\\logger\\esm2022\\lib\\services\\logger.service.mjs":{"code":"class LoggerService {\n    constructor() {\n        this.logTypeColors = {\n            info: 'lightblue',\n            warn: 'orange',\n            error: 'crimson',\n            log: 'grey',\n            table: 'green',\n        };\n        this.colorKey = '%c';\n        this.visibleLogs = {\n            info: true,\n            warn: true,\n            error: true,\n            log: true,\n            table: true,\n        };\n        this.saveLogsRecord = {\n            info: false,\n            warn: false,\n            error: false,\n            log: false,\n            table: false,\n        };\n        this.loggerList_ = [];\n        this.logger$ = new BehaviorSubject(null);\n    }\n    /**\n     *\n     * @param data\n     * Logger\n     * @description Log a message\n     * @example\n     * this.logService.log({\n     * message: 'initialized\n     * log: 'log',\n     * color: 'lightPink',\n     * weight: 'bold',\n     * showTime: true,\n     * enabled: true,\n     * title: 'AppComponent',\n     * });\n     * @returns void\n     */\n    log(data) {\n        const { color, weight, showTime, message, log, title, disabled } = data;\n        if (!this.checkIfLogIsGlobalEnabled(log)) {\n            return;\n        }\n        if (disabled) {\n            return;\n        }\n        const titleColor = this.logTypeColors[log];\n        const messageColor = color;\n        const messageWeight = weight || 'normal';\n        const titleMessage = `[${title || log}]`;\n        const titleStyle = `color: ${titleColor}; font-weight: bold;`;\n        const time = showTime ? `(${new Date().toLocaleTimeString()})` : '';\n        if (this.checkIfLogCanBeSaved(log)) {\n            this.logger = data;\n        }\n        if (typeof data.message === 'string') {\n            const message = `${data.message}`;\n            const messageStyle = `color: ${messageColor}; font-weight: ${messageWeight};`;\n            const messageToLog = `${this.colorKey}${time}${titleMessage} ${this.colorKey}${message}`;\n            console[data.log](messageToLog, titleStyle, messageStyle);\n            return;\n        }\n        const titleLog = `${this.colorKey}${time} ${titleMessage}`;\n        console[data.log](titleLog, titleStyle, message);\n    }\n    /**\n     *\n     * @param logType\n     * 'info' | 'warn' | 'error' | 'log' | 'table'\n     * @description Disable a specific log type\n     * @example\n     * this.logService.disableLog('info');\n     * @default enabled: true\n     * @returns void\n     */\n    disableLog(logType) {\n        this.visibleLogs[logType] = false;\n    }\n    /**\n     *\n     * @param logType\n     * 'info' | 'warn' | 'error' | 'log' | 'table'\n     * @description Enable a specific log type\n     * @example\n     * this.logService.enableLog('info');\n     * @default enabled: false\n     * @returns void\n     */\n    enableLog(logType) {\n        this.visibleLogs[logType] = true;\n    }\n    /**\n     *\n     * @description Disable all log types\n     * @example\n     * this.logService.disableAllLogs();\n     * @default enabled: true\n     * @returns void\n     */\n    disableAllLogs() {\n        Object.keys(this.visibleLogs).forEach((key) => {\n            this.visibleLogs[key] = false;\n        });\n    }\n    /**\n     *\n     * @description Enable all log types\n     * @example\n     * this.logService.enableAllLogs();\n     * @default enabled: false\n     * @returns void\n     */\n    enableAllLogs() {\n        Object.keys(this.visibleLogs).forEach((key) => {\n            this.visibleLogs[key] = true;\n        });\n    }\n    /**\n     *\n     * @param logType\n     * 'info' | 'warn' | 'error' | 'log' | 'table'\n     * @description Save a specific log type\n     * @example\n     * this.logService.enableSaveLog('info');\n     * @default enabled: false\n     * @returns void\n     */\n    enableSaveLog(logType) {\n        this.saveLogsRecord[logType] = true;\n    }\n    /**\n     *\n     * @param logType\n     * 'info' | 'warn' | 'error' | 'log' | 'table'\n     * @description Disable a specific log type\n     * @example\n     * this.logService.disableSaveLog('info');\n     * @default enabled: false\n     * @returns void\n     */\n    disableSaveLog(logType) {\n        this.saveLogsRecord[logType] = false;\n    }\n    /**\n     *\n     * @description Get the status of all log types\n     * @example\n     * this.logService.getLogsStatus();\n     * @returns { [key: string]: boolean }\n     */\n    getLogsStatus() {\n        return this.visibleLogs;\n    }\n    /**\n     *\n     * @description Get all logs saved\n     * @example\n     * this.logService.getLogs();\n     * @returns Observable<Logger[]>\n     */\n    get logRecords$() {\n        return this.logger$.asObservable();\n    }\n    /**\n     * @description Get all logs\n     * @example\n     * this.loggerList;\n     * @returns Logger[]\n     */\n    get loggerList() {\n        return this.loggerList_;\n    }\n    /**\n     *\n     * @description Clear all logs\n     * @example\n     * this.logService.clearLogs();\n     * @returns void\n     */\n    set logger(log) {\n        this.loggerList_.push(log);\n        this.logger$.next(log);\n    }\n    /**\n     * @description Get the current logger\n     * @example\n     * this.logger;\n     * @returns Logger\n     */\n    get logger() {\n        return this.logger$.value;\n    }\n    /**\n     *\n     * @param log\n     * @returns\n     * @description Check if log is enabled\n     * @example\n     * this.checkIfLogIsGlobalEnabled('info');\n     * @returns boolean\n     */\n    checkIfLogIsGlobalEnabled(log) {\n        return this.visibleLogs[log];\n    }\n    /**\n     *\n     * @param log\n     * @returns\n     * @description Check if log can be saved\n     * @example\n     * this.checkIfLogCanBeSaved('info');\n     * @returns boolean\n     */\n    checkIfLogCanBeSaved(log) {\n        return this.saveLogsRecord[log];\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.8\", ngImport: i0, type: LoggerService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.3.8\", ngImport: i0, type: LoggerService, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.8\", ngImport: i0, type: LoggerService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }] });","originalLength":19694,"removedExports":[],"renderedExports":["LoggerService"],"renderedLength":6299},"D:\\git\\logger\\dist\\logger\\esm2022\\lib\\models\\logger.interface.mjs":{"code":"","originalLength":1661,"removedExports":[],"renderedExports":[],"renderedLength":0},"D:\\git\\logger\\dist\\logger\\esm2022\\public-api.mjs":{"code":"/*\n * Public API Surface of logger\n */","originalLength":667,"removedExports":[],"renderedExports":[],"renderedLength":38},"D:\\git\\logger\\dist\\logger\\esm2022\\xilerth-ngx-logger.mjs":{"code":"/**\n * Generated bundle index. Do not edit.\n */","originalLength":512,"removedExports":[],"renderedExports":[],"renderedLength":47}},"referencedFiles":[],"code":"import * as i0 from '@angular/core';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\nclass LoggerService {\n    constructor() {\n        this.logTypeColors = {\n            info: 'lightblue',\n            warn: 'orange',\n            error: 'crimson',\n            log: 'grey',\n            table: 'green',\n        };\n        this.colorKey = '%c';\n        this.visibleLogs = {\n            info: true,\n            warn: true,\n            error: true,\n            log: true,\n            table: true,\n        };\n        this.saveLogsRecord = {\n            info: false,\n            warn: false,\n            error: false,\n            log: false,\n            table: false,\n        };\n        this.loggerList_ = [];\n        this.logger$ = new BehaviorSubject(null);\n    }\n    /**\n     *\n     * @param data\n     * Logger\n     * @description Log a message\n     * @example\n     * this.logService.log({\n     * message: 'initialized\n     * log: 'log',\n     * color: 'lightPink',\n     * weight: 'bold',\n     * showTime: true,\n     * enabled: true,\n     * title: 'AppComponent',\n     * });\n     * @returns void\n     */\n    log(data) {\n        const { color, weight, showTime, message, log, title, disabled } = data;\n        if (!this.checkIfLogIsGlobalEnabled(log)) {\n            return;\n        }\n        if (disabled) {\n            return;\n        }\n        const titleColor = this.logTypeColors[log];\n        const messageColor = color;\n        const messageWeight = weight || 'normal';\n        const titleMessage = `[${title || log}]`;\n        const titleStyle = `color: ${titleColor}; font-weight: bold;`;\n        const time = showTime ? `(${new Date().toLocaleTimeString()})` : '';\n        if (this.checkIfLogCanBeSaved(log)) {\n            this.logger = data;\n        }\n        if (typeof data.message === 'string') {\n            const message = `${data.message}`;\n            const messageStyle = `color: ${messageColor}; font-weight: ${messageWeight};`;\n            const messageToLog = `${this.colorKey}${time}${titleMessage} ${this.colorKey}${message}`;\n            console[data.log](messageToLog, titleStyle, messageStyle);\n            return;\n        }\n        const titleLog = `${this.colorKey}${time} ${titleMessage}`;\n        console[data.log](titleLog, titleStyle, message);\n    }\n    /**\n     *\n     * @param logType\n     * 'info' | 'warn' | 'error' | 'log' | 'table'\n     * @description Disable a specific log type\n     * @example\n     * this.logService.disableLog('info');\n     * @default enabled: true\n     * @returns void\n     */\n    disableLog(logType) {\n        this.visibleLogs[logType] = false;\n    }\n    /**\n     *\n     * @param logType\n     * 'info' | 'warn' | 'error' | 'log' | 'table'\n     * @description Enable a specific log type\n     * @example\n     * this.logService.enableLog('info');\n     * @default enabled: false\n     * @returns void\n     */\n    enableLog(logType) {\n        this.visibleLogs[logType] = true;\n    }\n    /**\n     *\n     * @description Disable all log types\n     * @example\n     * this.logService.disableAllLogs();\n     * @default enabled: true\n     * @returns void\n     */\n    disableAllLogs() {\n        Object.keys(this.visibleLogs).forEach((key) => {\n            this.visibleLogs[key] = false;\n        });\n    }\n    /**\n     *\n     * @description Enable all log types\n     * @example\n     * this.logService.enableAllLogs();\n     * @default enabled: false\n     * @returns void\n     */\n    enableAllLogs() {\n        Object.keys(this.visibleLogs).forEach((key) => {\n            this.visibleLogs[key] = true;\n        });\n    }\n    /**\n     *\n     * @param logType\n     * 'info' | 'warn' | 'error' | 'log' | 'table'\n     * @description Save a specific log type\n     * @example\n     * this.logService.enableSaveLog('info');\n     * @default enabled: false\n     * @returns void\n     */\n    enableSaveLog(logType) {\n        this.saveLogsRecord[logType] = true;\n    }\n    /**\n     *\n     * @param logType\n     * 'info' | 'warn' | 'error' | 'log' | 'table'\n     * @description Disable a specific log type\n     * @example\n     * this.logService.disableSaveLog('info');\n     * @default enabled: false\n     * @returns void\n     */\n    disableSaveLog(logType) {\n        this.saveLogsRecord[logType] = false;\n    }\n    /**\n     *\n     * @description Get the status of all log types\n     * @example\n     * this.logService.getLogsStatus();\n     * @returns { [key: string]: boolean }\n     */\n    getLogsStatus() {\n        return this.visibleLogs;\n    }\n    /**\n     *\n     * @description Get all logs saved\n     * @example\n     * this.logService.getLogs();\n     * @returns Observable<Logger[]>\n     */\n    get logRecords$() {\n        return this.logger$.asObservable();\n    }\n    /**\n     * @description Get all logs\n     * @example\n     * this.loggerList;\n     * @returns Logger[]\n     */\n    get loggerList() {\n        return this.loggerList_;\n    }\n    /**\n     *\n     * @description Clear all logs\n     * @example\n     * this.logService.clearLogs();\n     * @returns void\n     */\n    set logger(log) {\n        this.loggerList_.push(log);\n        this.logger$.next(log);\n    }\n    /**\n     * @description Get the current logger\n     * @example\n     * this.logger;\n     * @returns Logger\n     */\n    get logger() {\n        return this.logger$.value;\n    }\n    /**\n     *\n     * @param log\n     * @returns\n     * @description Check if log is enabled\n     * @example\n     * this.checkIfLogIsGlobalEnabled('info');\n     * @returns boolean\n     */\n    checkIfLogIsGlobalEnabled(log) {\n        return this.visibleLogs[log];\n    }\n    /**\n     *\n     * @param log\n     * @returns\n     * @description Check if log can be saved\n     * @example\n     * this.checkIfLogCanBeSaved('info');\n     * @returns boolean\n     */\n    checkIfLogCanBeSaved(log) {\n        return this.saveLogsRecord[log];\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.8\", ngImport: i0, type: LoggerService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.3.8\", ngImport: i0, type: LoggerService, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.8\", ngImport: i0, type: LoggerService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }] });\n\n/*\n * Public API Surface of logger\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { LoggerService };\n//# sourceMappingURL=xilerth-ngx-logger.mjs.map\n","map":null,"preliminaryFileName":"xilerth-ngx-logger.mjs","sourcemapFileName":"xilerth-ngx-logger.mjs.map"},{"fileName":"xilerth-ngx-logger.mjs.map","needsCodeReference":false,"source":"{\"version\":3,\"file\":\"xilerth-ngx-logger.mjs\",\"sources\":[\"../../../projects/logger/src/lib/services/logger.service.ts\",\"../../../projects/logger/src/public-api.ts\",\"../../../projects/logger/src/xilerth-ngx-logger.ts\"],\"sourcesContent\":[\"import { Injectable } from '@angular/core';\\r\\nimport { Logger, LoggerType } from '../models/logger.interface';\\r\\nimport { BehaviorSubject, Observable } from 'rxjs';\\r\\n@Injectable({\\r\\n  providedIn: 'root',\\r\\n})\\r\\nexport class LoggerService {\\r\\n  private logTypeColors: {\\r\\n    [key: string]: string;\\r\\n  } = {\\r\\n    info: 'lightblue',\\r\\n    warn: 'orange',\\r\\n    error: 'crimson',\\r\\n    log: 'grey',\\r\\n    table: 'green',\\r\\n  };\\r\\n\\r\\n  private colorKey = '%c';\\r\\n  private visibleLogs: {\\r\\n    [key: string]: boolean;\\r\\n  } = {\\r\\n    info: true,\\r\\n    warn: true,\\r\\n    error: true,\\r\\n    log: true,\\r\\n    table: true,\\r\\n  };\\r\\n\\r\\n  private saveLogsRecord = {\\r\\n    info: false,\\r\\n    warn: false,\\r\\n    error: false,\\r\\n    log: false,\\r\\n    table: false,\\r\\n  };\\r\\n\\r\\n  private loggerList_: Logger[] = [];\\r\\n  private logger$: BehaviorSubject<Logger | null> =\\r\\n    new BehaviorSubject<Logger | null>(null);\\r\\n\\r\\n  /**\\r\\n   *\\r\\n   * @param data\\r\\n   * Logger\\r\\n   * @description Log a message\\r\\n   * @example\\r\\n   * this.logService.log({\\r\\n   * message: 'initialized\\r\\n   * log: 'log',\\r\\n   * color: 'lightPink',\\r\\n   * weight: 'bold',\\r\\n   * showTime: true,\\r\\n   * enabled: true,\\r\\n   * title: 'AppComponent',\\r\\n   * });\\r\\n   * @returns void\\r\\n   */\\r\\n  public log(data: Logger) {\\r\\n    const { color, weight, showTime, message, log, title, disabled } = data;\\r\\n    if (!this.checkIfLogIsGlobalEnabled(log)) {\\r\\n      return;\\r\\n    }\\r\\n    if (disabled) {\\r\\n      return;\\r\\n    }\\r\\n    const titleColor = this.logTypeColors[log];\\r\\n    const messageColor = color;\\r\\n    const messageWeight = weight || 'normal';\\r\\n    const titleMessage = `[${title || log}]`;\\r\\n    const titleStyle = `color: ${titleColor}; font-weight: bold;`;\\r\\n    const time = showTime ? `(${new Date().toLocaleTimeString()})` : '';\\r\\n\\r\\n    if (this.checkIfLogCanBeSaved(log)) {\\r\\n      this.logger = data;\\r\\n    }\\r\\n\\r\\n    if (typeof data.message === 'string') {\\r\\n      const message = `${data.message}`;\\r\\n      const messageStyle = `color: ${messageColor}; font-weight: ${messageWeight};`;\\r\\n      const messageToLog = `${this.colorKey}${time}${titleMessage} ${this.colorKey}${message}`;\\r\\n      console[data.log](messageToLog, titleStyle, messageStyle);\\r\\n      return;\\r\\n    }\\r\\n    const titleLog = `${this.colorKey}${time} ${titleMessage}`;\\r\\n\\r\\n    console[data.log](titleLog, titleStyle, message);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *\\r\\n   * @param logType\\r\\n   * 'info' | 'warn' | 'error' | 'log' | 'table'\\r\\n   * @description Disable a specific log type\\r\\n   * @example\\r\\n   * this.logService.disableLog('info');\\r\\n   * @default enabled: true\\r\\n   * @returns void\\r\\n   */\\r\\n  public disableLog(logType: LoggerType) {\\r\\n    this.visibleLogs[logType] = false;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *\\r\\n   * @param logType\\r\\n   * 'info' | 'warn' | 'error' | 'log' | 'table'\\r\\n   * @description Enable a specific log type\\r\\n   * @example\\r\\n   * this.logService.enableLog('info');\\r\\n   * @default enabled: false\\r\\n   * @returns void\\r\\n   */\\r\\n  public enableLog(logType: LoggerType) {\\r\\n    this.visibleLogs[logType] = true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *\\r\\n   * @description Disable all log types\\r\\n   * @example\\r\\n   * this.logService.disableAllLogs();\\r\\n   * @default enabled: true\\r\\n   * @returns void\\r\\n   */\\r\\n  public disableAllLogs() {\\r\\n    Object.keys(this.visibleLogs).forEach((key) => {\\r\\n      this.visibleLogs[key] = false;\\r\\n    });\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *\\r\\n   * @description Enable all log types\\r\\n   * @example\\r\\n   * this.logService.enableAllLogs();\\r\\n   * @default enabled: false\\r\\n   * @returns void\\r\\n   */\\r\\n  public enableAllLogs() {\\r\\n    Object.keys(this.visibleLogs).forEach((key) => {\\r\\n      this.visibleLogs[key] = true;\\r\\n    });\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *\\r\\n   * @param logType\\r\\n   * 'info' | 'warn' | 'error' | 'log' | 'table'\\r\\n   * @description Save a specific log type\\r\\n   * @example\\r\\n   * this.logService.enableSaveLog('info');\\r\\n   * @default enabled: false\\r\\n   * @returns void\\r\\n   */\\r\\n  public enableSaveLog(logType: LoggerType) {\\r\\n    this.saveLogsRecord[logType] = true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *\\r\\n   * @param logType\\r\\n   * 'info' | 'warn' | 'error' | 'log' | 'table'\\r\\n   * @description Disable a specific log type\\r\\n   * @example\\r\\n   * this.logService.disableSaveLog('info');\\r\\n   * @default enabled: false\\r\\n   * @returns void\\r\\n   */\\r\\n  public disableSaveLog(logType: LoggerType) {\\r\\n    this.saveLogsRecord[logType] = false;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *\\r\\n   * @description Get the status of all log types\\r\\n   * @example\\r\\n   * this.logService.getLogsStatus();\\r\\n   * @returns { [key: string]: boolean }\\r\\n   */\\r\\n  public getLogsStatus() {\\r\\n    return this.visibleLogs;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *\\r\\n   * @description Get all logs saved\\r\\n   * @example\\r\\n   * this.logService.getLogs();\\r\\n   * @returns Observable<Logger[]>\\r\\n   */\\r\\n  public get logRecords$(): Observable<Logger | null> {\\r\\n    return this.logger$.asObservable();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @description Get all logs\\r\\n   * @example\\r\\n   * this.loggerList;\\r\\n   * @returns Logger[]\\r\\n   */\\r\\n  public get loggerList(): Logger[] {\\r\\n    return this.loggerList_;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *\\r\\n   * @description Clear all logs\\r\\n   * @example\\r\\n   * this.logService.clearLogs();\\r\\n   * @returns void\\r\\n   */\\r\\n  private set logger(log: Logger) {\\r\\n    this.loggerList_.push(log);\\r\\n    this.logger$.next(log);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @description Get the current logger\\r\\n   * @example\\r\\n   * this.logger;\\r\\n   * @returns Logger\\r\\n   */\\r\\n  private get logger(): Logger | null {\\r\\n    return this.logger$.value;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *\\r\\n   * @param log\\r\\n   * @returns\\r\\n   * @description Check if log is enabled\\r\\n   * @example\\r\\n   * this.checkIfLogIsGlobalEnabled('info');\\r\\n   * @returns boolean\\r\\n   */\\r\\n  private checkIfLogIsGlobalEnabled(log: LoggerType) {\\r\\n    return this.visibleLogs[log];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *\\r\\n   * @param log\\r\\n   * @returns\\r\\n   * @description Check if log can be saved\\r\\n   * @example\\r\\n   * this.checkIfLogCanBeSaved('info');\\r\\n   * @returns boolean\\r\\n   */\\r\\n  private checkIfLogCanBeSaved(log: LoggerType) {\\r\\n    return this.saveLogsRecord[log];\\r\\n  }\\r\\n}\\r\\n\",\"/*\\r\\n * Public API Surface of logger\\r\\n */\\r\\n\\r\\nexport * from './lib/services/logger.service';\\r\\nexport * from './lib/models/logger.interface';\\r\\n\",\"/**\\n * Generated bundle index. Do not edit.\\n */\\n\\nexport * from './public-api';\\n\"],\"names\":[],\"mappings\":\"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\"}","type":"asset"}]}